#!/usr/bin/env python

import json
from dataclasses import asdict

from json_insert_format import CloudAvailabilityZone, CloudProvider, CloudRegion
from constants import REGION_DATA_DIR

PROVIDER = "aws"


def fetch_azs():
    """Fetch all AWS availability zones in all regions"""
    # load from json file
    az_file = REGION_DATA_DIR / f"{PROVIDER}_unprocessed.json"
    with open(az_file, "r") as f:
        azs = json.load(f)
    assert len(azs) > 50, f"Expected at least 50 azs, got {len(azs)}"
    return azs


def format_az_for_insert(azs):
    """
    {'GroupName': 'us-west-2',
    'Messages': [],
    'NetworkBorderGroup': 'us-west-2',
    'OptInStatus': 'opt-in-not-required',
    'RegionName': 'us-west-2',
    'State': 'available',
    'ZoneId': 'usw2-az2',
    'ZoneName': 'us-west-2b',
    'ZoneType': 'availability-zone'},
    """
    formatted_azs = set()
    for az in azs:
        assert (
            az["ZoneType"] == "availability-zone"
        ), f"Sanity check - ZoneType must be 'availability-zone', not {az['ZoneType']}"
        region = az["RegionName"]
        original_az_name = az["ZoneName"]
        az = az["ZoneName"].removeprefix(region)  # b
        formatted_azs.add(CloudAvailabilityZone(region, original_az_name, az))
    return [asdict(formatted) for formatted in formatted_azs]


def format_region_for_insert(azs):
    formatted_regions = set()
    for az in azs:
        original_region_name = az["RegionName"]
        geographic_region, cardinality, number = original_region_name.split("-")
        region_model_data = CloudRegion(
            geographic_region, cardinality, number, original_region_name
        )
        formatted_regions.add(region_model_data)
    return [asdict(formatted) for formatted in formatted_regions]


def write_json_file(data, model):
    filename = REGION_DATA_DIR / f"{PROVIDER}_{model}.json"
    with open(filename, "w") as f:
        json.dump(data, f, indent=4)
    print(f"file updated: {filename}")


def main():
    azs = fetch_azs()
    provider_model_data = [asdict(CloudProvider(PROVIDER))]
    az_model_data = format_az_for_insert(azs)
    region_model_data = format_region_for_insert(azs)

    assert (
        provider_model_data[0]["provider"] == PROVIDER
    ), f"Expected provider to be '{PROVIDER}', got {provider_model_data}"
    assert (
        len(region_model_data) > 15
    ), f"Expected at least 15 regions, got {len(region_model_data)}"
    assert (
        len(az_model_data) > 50
    ), f"Expected at least 50 availability zones, got {len(az_model_data)}"

    write_json_file(provider_model_data, "provider")
    write_json_file(region_model_data, "region")
    write_json_file(az_model_data, "az")


if __name__ == "__main__":
    main()
